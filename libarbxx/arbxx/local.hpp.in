/**********************************************************************
 *  This file is part of arbxx.
 *
 *        Copyright (C)      2019 Vincent Delecroix
 *        Copyright (C) 2019-2022 Julian RÃ¼th
 *
 *  arbxx is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  arbxx is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with arbxx. If not, see <https://www.gnu.org/licenses/>.
 *********************************************************************/

/*
 * This file is included by all headers that are shipped with this library.
 * It should therefore contain global definitions but only those that can
 * be safely shipped to the client, i.e., not the ones in config.h
 */

#ifndef LIBARBXXL_LOCAL_HPP
#define LIBARBXXL_LOCAL_HPP

#include <arb.h>

namespace arbxx {
// We use the same type that Arb uses to specify precisions. This is a signed
// integer type defined by FLINT as mp_limb_signed_t which in turn is defined
// by GMP.
using prec = slong;

// We use signed integers to denote size, count, and such things. Mainstream
// opinion seems to be that such things should be signed these days though
// STL does for historical reasons not do so, see minute 63 of
// https://channel9.msdn.com/Events/GoingNative/2013/Interactive-Panel-Ask-Us-Anything
// Assuming that prec is big enough to denote the number of digits something
// could reasonably have, that should also be the length that some data
// should reasonably have, so let's just use the same here.
using size = prec;

// A templatized constant that is false. This helps to use static_assert in
// branches of constexpr-if. Just using a plain false leads to compile errors
// so we must make sure the compiler tries not to instantiate this if it's not
// on an active branch.
template <auto = 0>
constexpr bool false_v = false;
template <typename = void>
constexpr bool false_t = false;

}  // namespace arbxx

#ifdef __CLING__

#pragma cling add_library_path("@libdir@")
#pragma cling load("libarbxx")

#endif  // __CLING__

// Visibility Macros to separate API from non-API and inline template code.
// See, https://gcc.gnu.org/wiki/Visibility.
#if defined _WIN32 || defined __CYGWIN__
#define LIBARBXX_LIBRARY_IMPORT __declspec(dllimport)
#define LIBARBXX_LIBRARY_EXPORT __declspec(dllexport)
#define LIBARBXX_LIBRARY_HIDDEN
#else
#define LIBARBXX_LIBRARY_IMPORT __attribute__((visibility("default")))
#define LIBARBXX_LIBRARY_EXPORT __attribute__((visibility("default")))
#define LIBARBXX_LIBRARY_HIDDEN __attribute__((visibility("hidden")))
#endif

#ifdef BUILD_LIBARBXX
#define LIBARBXX_API LIBARBXX_LIBRARY_EXPORT
#define LIBARBXX_LOCAL LIBARBXX_LIBRARY_HIDDEN
#else
#define LIBARBXX_API LIBARBXX_LIBRARY_IMPORT
#define LIBARBXX_LOCAL
#endif

#endif  // LIBARBXX_ARBXX_HPP
