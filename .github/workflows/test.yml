name: Test
on:
  push: { branches: [ "master" ] }
  pull_request: { branches: [ "master" ] }
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  test-libexactreal:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        include:
          - on: ubuntu-20.04
          - on: ubuntu-20.04
            environment: binder
          - on: ubuntu-20.04
            sanitizer: valgrind
          - on: macos-10.15
          - on: macos-10.15
            sanitizer: address
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - name: build flags
        id: flags
        run: |
          echo "::set-output name=configure::"`[[ ${{ runner.os }} == "Linux" ]] && echo "--with-version-script"`
          echo "::set-output name=shared::"`[[ "${{ matrix.sanitizer }}" == "address" ]] && echo "-fsanitize=address -fno-sanitize-recover -fno-omit-frame-pointer"` `[[ "${{ matrix.sanitizer }}" == "undefined" ]] && echo "-fsanitize=undefined -fno-sanitize-recover -fno-omit-frame-pointer"` `[[ "${{ matrix.on }}" == "macos-10.15" ]] && [[ "${{ matrix.sanitizer }}" == "address" || "${{ matrix.sanitizer }}" == "undefined" ]] && echo "-Wl,-undefined,dynamic_lookup"`
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", channel-priority: true }
      - name: install valgrind
        run: |
          mamba install valgrind
        if: ${{ matrix.sanitizer == 'valgrind' }}
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libexactreal/environment.yml
          conda list
        if: ${{ matrix.environment != 'binder' }}
      - name: Create binder environment
        shell: bash -l {0}
        run: |
          wget -O repo2docker.yml https://github.com/jupyterhub/repo2docker/raw/main/repo2docker/buildpacks/conda/environment.yml
          mamba install -n test --quiet -y pytest pytest-xdist byexample
          mamba env update -n test --quiet -f repo2docker.yml
          mamba env update -n test --quiet -f binder/environment.yml
          mamba uninstall -y --force libexactreal pyexactreal
          conda list
        if: ${{ matrix.environment == 'binder' }}
      - name: configure & build & test
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          cd libexactreal
          ./bootstrap

          echo "::group::configure"
          export CXXFLAGS="$CXXFLAGS -UNDEBUG -g3 -fvisibility=hidden -fvisibility-inlines-hidden"
          # conda puts an explicit -std=c++14 on the command line on macOS, we override it here:
          export CXXFLAGS="$CXXFLAGS ${{ steps.flags.outputs.shared }} -std=c++17"
          export LDFLAGS="$LDFLAGS ${{ steps.flags.outputs.shared }}"
          ./configure --prefix="$PREFIX" --without-benchmark ${{ steps.flags.outputs.configure }}

          echo "::group::make"
          make V=1

          echo "::group::test"
          make V=1 `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo check-valgrind || echo check` VALGRIND_SUPPRESSIONS_FILES=`pwd`/../tools/valgrind/conda.supp
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
  test-pyexactreal:
    runs-on: ${{ matrix.on }}
    strategy:
      matrix:
        include:
          - on: ubuntu-20.04
            python: "3.6"
          - on: ubuntu-20.04
            python: "3.7"
          - on: ubuntu-20.04
            python: "3.8"
          - on: ubuntu-20.04
            python: "3.9"
          - on: ubuntu-20.04
            python: "3.9"
            sanitizer: valgrind
          - on: ubuntu-20.04
            python: "3.7"
            environment: binder
          - on: macos-10.15
            python: "3.6"
          - on: macos-10.15
            python: "3.7"
          - on: macos-10.15
            python: "3.8"
          - on: macos-10.15
            python: "3.9"
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - name: build flags
        id: flags
        run: |
          echo "::set-output name=configure::"`[[ ${{ runner.os }} == "Linux" ]] && echo "--with-version-script"` `[[ '${{ matrix.environment }}' == "binder" ]] && echo "--without-sage"`
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", python-version: "${{ matrix.python }}", channel-priority: true }
      - name: install valgrind
        run: |
          mamba install valgrind
        if: ${{ matrix.sanitizer == 'valgrind' }}
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libexactreal/environment.yml
          mamba env update --quiet -n test -f pyexactreal/environment.yml
          conda list
        if: ${{ matrix.environment != 'binder' }}
      - name: Create binder environment
        shell: bash -l {0}
        run: |
          wget -O repo2docker.yml https://github.com/jupyterhub/repo2docker/raw/main/repo2docker/buildpacks/conda/environment.yml
          mamba install -n test --quiet -y pytest pytest-xdist byexample
          mamba env update -n test --quiet -f repo2docker.yml
          mamba env update -n test --quiet -f binder/environment.yml
          conda list
        if: ${{ matrix.environment == 'binder' }}
      - name: configure & build & test
        shell: bash -l {0}
        run: |
          echo "::group::bootstrap"
          ./bootstrap

          echo "::group::configure"
          export CXXFLAGS="$CXXFLAGS -UNDEBUG -g3 -fvisibility=hidden -fvisibility-inlines-hidden"
          # conda puts an explicit -std=c++14 on the command line on macOS, we override it here:
          export CXXFLAGS="$CXXFLAGS -std=c++17"
          # similarly cppyy on macOS seems to default to C++14, https://github.com/conda-forge/cppyy-feedstock/issues/21
          export EXTRA_CLING_ARGS="-std=c++17"
          ./configure --prefix="$PREFIX" --without-benchmark ${{ steps.flags.outputs.configure }}

          echo "::group::make"
          make V=1

          echo "::group::test"
          cd pyexactreal
          make V=1 `[[ "${{ matrix.sanitizer }}" == "valgrind" ]] && echo check-valgrind || echo check` VALGRIND_SUPPRESSIONS_FILES=`pwd`/../tools/valgrind/conda.supp
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
  distcheck:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", channel-priority: true }
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libexactreal/environment.yml
          mamba env update --quiet -n test -f pyexactreal/environment.yml
          conda list
      - name: make distcheck
        shell: bash -l {0}
        run: |
          ./bootstrap
          ./configure --prefix="$PREFIX"
          make distcheck
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
  abi-compliance:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with: { submodules: recursive }
      - uses: conda-incubator/setup-miniconda@v2
        with: { mamba-version: "*", channels: "flatsurf,conda-forge", channel-priority: true }
      - name: install ABI checker
        run: |
          sudo apt update
          sudo apt install abi-dumper abi-compliance-checker lynx
      - name: install dependencies
        shell: bash -l {0}
        run: |
          mamba env update --quiet -n test -f libexactreal/environment.yml
          conda list
      - name: configure & make
        shell: bash -l {0}
        run: |
          cd libexactreal
          ./bootstrap
          export CXXFLAGS="$CXXFLAGS -g -Og"
          ./configure --prefix="$PREFIX" --with-version-script
          make
      - name: check ABI compliance
        run: |
          echo "::group::creating ABI dump"
          abi-dumper libexactreal/src/.libs/libexactreal.so -o libexactreal/test/ABI-new.dump
          cat libexactreal/test/ABI-new.dump

          echo "::group::checking for removed symbols"
          abi-compliance-checker -l libexactreal -old libexactreal/test/ABI.dump -new libexactreal/test/ABI-new.dump -stdout | lynx --dump -stdin

          echo "::group::checking for new symbols"
          abi-compliance-checker -l libexactreal -old libexactreal/test/ABI-new.dump -new libexactreal/test/ABI-old.dump -stdout | lynx --dump -stdin
      - name: show logs
        shell: bash -l {0}
        run: for log in `find . -name '*.log'`; do echo "::group::$log"; cat $log; echo "::endgroup"; done
        if: ${{ always() }}
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

env:
  MAKEFLAGS: -j2
